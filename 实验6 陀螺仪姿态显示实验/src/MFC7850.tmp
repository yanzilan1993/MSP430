#include "mpu6050.h"
#include "IIC.h"
#include "timer.h"
#include "gpio.h"
#include "string.h"
#include "dbg.h"
#include "imu.h"
#include "kalman.h"

static uint8 buffer[14];
int16_t MpuOffset[6] = {0};
static volatile int16_t *pMpu = (int16_t *)&MPU6050;

/**************************实现函数********************************************
*函数原型:		unsigned char MPU6050_is_DRY(void)
*功　　能:	    检查 MPU6050的中断引脚，测试是否完成转换
返回 1  转换完成
0 数据寄存器还没有更新
*******************************************************************************/
unsigned char MPU6050_is_DRY(void)
{
    // remember_to_update
//    if(GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_5) == Bit_SET)
//        return 1;
//    else
        return 0;
}

/**************************实现函数********************************************
*函数原型:		void MPU6050_setClockSource(uint8_tsource)
*功　　能:	    设置  MPU6050 的时钟源
 * CLK_SEL | Clock Source
 * --------+--------------------------------------
 * 0       | Internal oscillator
 * 1       | PLL with X Gyro reference
 * 2       | PLL with Y Gyro reference
 * 3       | PLL with Z Gyro reference
 * 4       | PLL with external 32.768kHz reference
 * 5       | PLL with external 19.2MHz reference
 * 6       | Reserved
 * 7       | Stops the clock and keeps the timing generator in reset
*******************************************************************************/
void MPU6050_setClockSource(uint8 source)
{
    IICwriteBits(devAddr, MPU6050_RA_PWR_MGMT_1_0x6B, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
}

/** Trigger a full device reset.
 * A small delay of ~50ms may be desirable after triggering a reset.
 * @see MPU6050_RA_PWR_MGMT_1_0x6B
 * @see MPU6050_PWR1_DEVICE_RESET_BIT
 */
void MPU6050_reset(void)
{
    IICwriteBit(devAddr, MPU6050_RA_PWR_MGMT_1_0x6B, MPU6050_PWR1_DEVICE_RESET_BIT, 1);
}

/** Set full-scale gyroscope range.
 * @param range New full-scale gyroscope range value
 * @see getFullScaleRange()
 * @see MPU6050_GYRO_FS_250
 * @see MPU6050_RA_GYRO_CONFIG_0x1B
 * @see MPU6050_GCONFIG_FS_SEL_BIT
 * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 */
void MPU6050_setFullScaleGyroRange(uint8 range)
{
    IICwriteBits(devAddr, MPU6050_RA_GYRO_CONFIG_0x1B, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
}

/**************************实现函数********************************************
*函数原型:		void MPU6050_setFullScaleAccelRange(uint8_trange)
*功　　能:	    设置  MPU6050 加速度计的最大量程
*******************************************************************************/
void MPU6050_setFullScaleAccelRange(uint8 range)
{
    IICwriteBits(devAddr, MPU6050_RA_ACCEL_CONFIG_0x1C, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
}

/**************************实现函数********************************************
*函数原型:		void MPU6050_setSleepEnabled(uint8_tenabled)
*功　　能:	    设置  MPU6050 是否进入睡眠模式
				enabled =1   睡觉
			    enabled =0   工作
*******************************************************************************/
void MPU6050_setSleepEnabled(uint8 enabled)
{
    IICwriteBit(devAddr, MPU6050_RA_PWR_MGMT_1_0x6B, MPU6050_PWR1_SLEEP_BIT, enabled);
}

/**************************实现函数********************************************
*函数原型:		uint8_tMPU6050_getDeviceID(void)
*功　　能:	    读取  MPU6050 WHO_AM_I 标识	 将返回 0x68
*******************************************************************************/
uint8 MPU6050_getDeviceID(void)
{
    IICreadBytes(devAddr, MPU6050_RA_WHO_AM_I, 1, buffer);
    
    return buffer[0];
}

/**************************实现函数********************************************
*函数原型:		uint8_tMPU6050_testConnection(void)
*功　　能:	    检测MPU6050 是否已经连接
*******************************************************************************/
uint8 MPU6050_testConnection(void)
{
   if(MPU6050_getDeviceID() == 0x68)
        return 1;
   else
        return 0;
}

/**************************实现函数********************************************
*函数原型:		void MPU6050_setI2CMasterModeEnabled(uint8_tenabled)
*功　　能:	    设置 MPU6050 是否为AUX I2C线的主机
*******************************************************************************/
void MPU6050_setI2CMasterModeEnabled(uint8 enabled)
{
    IICwriteBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_EN_BIT, enabled);
}

/**************************实现函数********************************************
*函数原型:		void MPU6050_setI2CBypassEnabled(uint8_tenabled)
*功　　能:	    设置 MPU6050 是否为AUX I2C线的主机
*******************************************************************************/
void MPU6050_setI2CBypassEnabled(uint8 enabled)
{
    IICwriteBit(devAddr, MPU6050_RA_INT_PIN_CFG_0x37, MPU6050_INTCFG_I2C_BYPASS_EN_BIT, enabled);
}

/**************************实现函数********************************************
*函数原型:		void MPU6050_Check()
*功　　能:	  检测IIC总线上的MPU6050是否存在
*******************************************************************************/
void MPU6050_Check(void) 
{ 
    // remember_to_update
//  switch(MPU6050_testConnection())
//  {
//    case 0:printf("MPU6050 not found...\r\n");
//      break;
//    case 1:printf("MPU6050 check success...\r\n");
//      break;
//  }
} 
/**************************实现函数********************************************
*函数原型:		void MPU6050_initialize(void)
*功　　能:	    初始化 	MPU6050 以进入可用状态。
*******************************************************************************/
void MPU6050_initialize(void)
{    
    // Sensor MPU_Int Pin Initialize
    GPIO_setAsInputPin(GPIO_PORT_P3, GPIO_PIN2);
    
    // IIC Initialize
    IIC_Init(USCI_B_I2C_CLOCKSOURCE_ACLK, 400000);
    
    // Sensor Initialize
    
    // 通过软件复位器件
    
    IICwriteByte(devAddr, MPU6050_RA_PWR_MGMT_1_0x6B, 0x80);      //PWR_MGMT_1    -- DEVICE_RESET 1
    delay_ms(5);
    IICwriteByte(devAddr, MPU6050_RA_SMPLRT_DIV_0x19, 0x02);      //SMPLRT_DIV    -- SMPLRT_DIV = 0  Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV)
    IICwriteByte(devAddr, MPU6050_RA_PWR_MGMT_1_0x6B, 0x03);      //PWR_MGMT_1    -- SLEEP 0; CYCLE 0; TEMP_DIS 0; CLKSEL 3 (PLL with Z Gyro reference)
    IICwriteByte(devAddr, 0x1A,0x03);  // INT_PIN_CFG   -- INT_LEVEL_HIGH, INT_OPEN_DIS, LATCH_INT_DIS, INT_RD_CLEAR_DIS, FSYNC_INT_LEVEL_HIGH, FSYNC_INT_DIS, I2C_BYPASS_EN, CLOCK_DIS
    IICwriteByte(devAddr, MPU6050_RA_CONFIG_0x1A, MPU6050_DLPF_BW_42_0x03);  //CONFIG        -- EXT_SYNC_SET 0 (disable input pin for data sync) ; default DLPF_CFG = 0 => ACC bandwidth = 260Hz  GYRO bandwidth = 256Hz)
    IICwriteByte(devAddr, 0x1B,0x18); 
    IICwriteByte(devAddr, 0x1C,0x09); 

    
}

void MPU6050_Read_Accelerometer(int16 *accData)
{
    static uint8 buf[8];

    IICreadBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H_0x3B, 7, buf);
    
    accData[0] = (buf[1] << 8) | buf[0];
    accData[1] = (buf[3] << 8) | buf[2];
    accData[2] = (buf[5] << 8) | buf[4];
    
    DbgInfo.ax = accData[0];
    DbgInfo.ay = accData[1];
    DbgInfo.az = accData[2];
}

void MPU6050_Read_Gyroscope(int16 *gyroData)
{
    static uint8 buf[8];

    IICreadBytes(devAddr, MPU6050_RA_GYRO_XOUT_H, 7, buf);
    
    gyroData[0] = (buf[0] << 8) | buf[1];
    gyroData[1] = (buf[2] << 8) | buf[3];
    gyroData[2] = (buf[4] << 8) | buf[5];
    
    DbgInfo.gx = gyroData[0];
    DbgInfo.gy = gyroData[1];
    DbgInfo.gz = gyroData[2];
}

//用于校准 DMP的偏置值
void MPU6050_setAccOffset(int16 offset[3])
{
    uint8 buf[2],i=0;
    
    for(i=0;i<3;i++)
    {
        buf[0]=offset[i]>>8;
        buf[1]=offset[i];
        IICwriteBytes(devAddr, MPU6050_RA_XA_OFFS_H + i*2, 2,buf);
    }
}

void MPU6050_setGyroOffset(int16 offset[3])
{
    uint8 buf[2],i=0;
    
    for(i=0;i<3;i++)
    {
        buf[0]=offset[i]>>8;
        buf[1]=offset[i];
        IICwriteBytes(devAddr, MPU6050_RA_XG_OFFS_USRH + i*2, 2,buf);
    }	 
}

// BANK_SEL register
void MPU6050_setMemoryBank(uint8 bank, uint8 prefetchEnabled, uint8 userBank)
{
    bank &= 0x1F;
    if(userBank)
        bank |= 0x20;
    
    if(prefetchEnabled)
        bank |= 0x40;
    
    IICwriteByte(devAddr, MPU6050_RA_BANK_SEL, bank);
}

// MEM_START_ADDR register
void MPU6050_setMemoryStartAddress(uint8 address)
{
    IICwriteByte(devAddr, MPU6050_RA_MEM_START_ADDR, address);
}

// MEM_R_W register
uint8 MPU6050_readMemoryByte(void)
{
    IICreadBytes(devAddr, MPU6050_RA_MEM_R_W, 1, buffer);
    
    return buffer[0];
}

// XG_OFFS_USR* registers
int16 MPU6050_getXGyroOffset(void)
{
    IICreadBytes(devAddr, MPU6050_RA_XG_OFFS_USRH, 2, buffer);
    
    return (((int16)buffer[0]) << 8) | buffer[1];
}

int16 MPU6050_getYGyroOffset(void)
{
    IICreadBytes(devAddr, MPU6050_RA_YG_OFFS_USRH, 2, buffer);
    
    return (((int16)buffer[0]) << 8) | buffer[1];
}
int16 MPU6050_getZGyroOffset(void)
{
    IICreadBytes(devAddr, MPU6050_RA_ZG_OFFS_USRH, 2, buffer);
    
    return (((int16)buffer[0]) << 8) | buffer[1];
}

uint8 verifyBuffer[MPU6050_DMP_MEMORY_CHUNK_SIZE];
uint8 progBuffer[MPU6050_DMP_MEMORY_CHUNK_SIZE];

uint8 MPU6050_writeMemoryBlock(const uint8 *data, uint16_t dataSize, uint8 bank, uint8 address, uint8 verify, uint8 useProgMem) {
    uint8 chunkSize;
    uint8 *tprogBuffer;
    uint16_t i;
    uint8 j;
	MPU6050_setMemoryBank(bank,0,0);
    MPU6050_setMemoryStartAddress(address);
    
    for(i = 0; i < dataSize;)
    {
        // determine correct chunk size according to bank position and data size
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;

        // make sure we don't go past the data size
        if(i + chunkSize > dataSize)
            chunkSize = dataSize - i;

        // make sure this chunk doesn't go past the bank boundary (256 bytes)
        if(chunkSize > 256 - address)
            chunkSize = 256 - address;
        
        // write the chunk of data as specified
        tprogBuffer = (uint8*)data + i;
        
        IICwriteBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, tprogBuffer);

        // verify data if needed
        if(verify)
        {
            MPU6050_setMemoryBank(bank,0,0);
            MPU6050_setMemoryStartAddress(address);
            IICreadBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, verifyBuffer);

			for(j=0;j<chunkSize;j++)
            {
                if(tprogBuffer[j] != verifyBuffer[j]) 
                    return 0;   // uh oh.
			}
        }
        
        // increase byte index by [chunkSize]
        i += chunkSize;

        // uint8_tautomatically wraps to 0 at 256
        address += chunkSize;

        // if we aren't done, update bank (if necessary) and address
        if(i < dataSize)
        {
            if(address == 0)
                bank++;
            
            MPU6050_setMemoryBank(bank, 0, 0);
            MPU6050_setMemoryStartAddress(address);
        }
    }
    
    return 1;
}

uint8 MPU6050_writeDMPConfigurationSet(const uint8 *data, uint16_t dataSize, uint8 useProgMem)
{
    uint8 *progBuffer, success, special;
    uint16_t i;

    // config set data is a long string of blocks with the following structure:
    // [bank] [offset] [length] [byte[0], byte[1], ..., byte[length]]
    uint8 bank, offset, length;
    
    for(i = 0; i < dataSize;)
    {
        bank = data[i++];
        offset = data[i++];
        length = data[i++];

        // write data or perform special action
        if(length > 0)
        {
            // regular block of data to write
            progBuffer = (uint8*)data + i;
           
            success = MPU6050_writeMemoryBlock(progBuffer, length, bank, offset, 1, 0);
            i += length;
        }
        else
        {
            // special instruction
            // NOTE: this kind of behavior (what and when to do certain things)
            // is totally undocumented. This code is in here based on observed
            // behavior only, and exactly why (or even whether) it has to be here
            // is anybody's guess for now.
         
            special = data[i++];
            if(special == 0x01)
            {
                // enable DMP-related interrupts
                
                IICwriteByte(devAddr, MPU6050_RA_INT_ENABLE, 0x32);  // single operation

                success = 1;
            }
            else
            {
                // unknown special command
                success = 0;
            }
        }
        
        if(!success)
        {
            return 0; // uh oh
        }
    }
    
    return 1;
}

uint8 MPU6050_writeProgMemoryBlock(const uint8 *data, uint16_t dataSize, uint8 bank, uint8 address, uint8 verify)
{
	return MPU6050_writeMemoryBlock(data, dataSize, bank, address, verify, 0);
}

uint8 MPU6050_writeProgDMPConfigurationSet(const uint8 *data, uint16_t dataSize)
{
    return MPU6050_writeDMPConfigurationSet(data, dataSize, 0);
}

/** Set full interrupt enabled status.
 * Full register byte for all interrupts, for quick reading. Each bit should be
 * set 0 for disabled, 1 for enabled.
 * @param enabled New interrupt enabled status
 * @see getIntFreefallEnabled()
 * @see MPU6050_RA_INT_ENABLE
 * @see MPU6050_INTERRUPT_FF_BIT
 **/
void MPU6050_setIntEnabled(uint8 enabled)
{
    IICwriteByte(devAddr, MPU6050_RA_INT_ENABLE, enabled);
}

/** Set gyroscope sample rate divider.
 * @param rate New sample rate divider
 * @see getRate()
 * @see MPU6050_RA_SMPLRT_DIV_0x19
 */
void MPU6050_setRate(uint8 rate)
{
    IICwriteByte(devAddr, MPU6050_RA_SMPLRT_DIV_0x19, rate);
}

/** Set digital low-pass filter configuration.
 * @param mode New DLFP configuration setting
 * @see getDLPFBandwidth()
 * @see MPU6050_DLPF_BW_256
 * @see MPU6050_RA_CONFIG_0x1A
 * @see MPU6050_CFG_DLPF_CFG_BIT
 * @see MPU6050_CFG_DLPF_CFG_LENGTH
 */
void MPU6050_setDLPFMode(uint8 mode)
{
    IICwriteBits(devAddr, MPU6050_RA_CONFIG_0x1A, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, mode);
}

/** Set external FSYNC configuration.
 * @see getExternalFrameSync()
 * @see MPU6050_RA_CONFIG_0x1A
 * @param sync New FSYNC configuration value
 */
void MPU6050_setExternalFrameSync(uint8 sync)
{
    IICwriteBits(devAddr, MPU6050_RA_CONFIG_0x1A, MPU6050_CFG_EXT_SYNC_SET_BIT, MPU6050_CFG_EXT_SYNC_SET_LENGTH, sync);
}

void MPU6050_setDMPConfig1(uint8 config)
{
    IICwriteByte(devAddr, MPU6050_RA_DMP_CFG_1, config);
}

void MPU6050_setDMPConfig2(uint8 config)
{
    IICwriteByte(devAddr, MPU6050_RA_DMP_CFG_2, config);
}

void MPU6050_setOTPBankValid(uint8 enabled)
{
    IICwriteBit(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT, enabled);
}

void MPU6050_setXGyroOffset(int16 offset)
{
	buffer[0] = offset>>8;
	buffer[1] = offset&0x00ff;
    IICwriteBytes(devAddr, MPU6050_RA_XG_OFFS_USRH, 2, buffer);
}

void MPU6050_setYGyroOffset(int16 offset)
{
	buffer[0] = offset>>8;
	buffer[1] = offset&0x00ff;
    IICwriteBytes(devAddr, MPU6050_RA_YG_OFFS_USRH, 2, buffer);
}

void MPU6050_setZGyroOffset(int16 offset)
{
    buffer[0] = offset>>8;
	buffer[1] = offset&0x00ff;
    IICwriteBytes(devAddr, MPU6050_RA_ZG_OFFS_USRH, 2, buffer);
}

/** Reset the FIFO.
 * This bit resets the FIFO buffer when set to 1 while FIFO_EN equals 0. This
 * bit automatically clears to 0 after the reset has been triggered.
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_FIFO_RESET_BIT
 */
void MPU6050_resetFIFO(void)
{
    IICwriteBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT, 1);
}

/** Get current FIFO buffer size.
 * This value indicates the number of bytes stored in the FIFO buffer. This
 * number is in turn the number of bytes that can be read from the FIFO buffer
 * and it is directly proportional to the number of samples available given the
 * set of sensor data bound to be stored in the FIFO (register 35 and 36).
 * @return Current FIFO buffer size
 */
uint16_t MPU6050_getFIFOCount(void)
{
    IICreadBytes(devAddr, MPU6050_RA_FIFO_COUNTH, 2, buffer);
    
    return (((uint16_t)buffer[0]) << 8) | buffer[1];
}

/** Set free-fall event acceleration threshold.
 * @param threshold New motion detection acceleration threshold value (LSB = 2mg)
 * @see getMotionDetectionThreshold()
 * @see MPU6050_RA_MOT_THR
 */
void MPU6050_setMotionDetectionThreshold(uint8 threshold)
{
    IICwriteByte(devAddr, MPU6050_RA_MOT_THR, threshold);
}

/** Set zero motion detection event acceleration threshold.
 * @param threshold New zero motion detection acceleration threshold value (LSB = 2mg)
 * @see getZeroMotionDetectionThreshold()
 * @see MPU6050_RA_ZRMOT_THR
 */
void MPU6050_setZeroMotionDetectionThreshold(uint8 threshold)
{
    IICwriteByte(devAddr, MPU6050_RA_ZRMOT_THR, threshold);
}

/** Set motion detection event duration threshold.
 * @param duration New motion detection duration threshold value (LSB = 1ms)
 * @see getMotionDetectionDuration()
 * @see MPU6050_RA_MOT_DUR
 */
void MPU6050_setMotionDetectionDuration(uint8 duration)
{
    IICwriteByte(devAddr, MPU6050_RA_MOT_DUR, duration);
}

/** Set zero motion detection event duration threshold.
 * @param duration New zero motion detection duration threshold value (LSB = 1ms)
 * @see getZeroMotionDetectionDuration()
 * @see MPU6050_RA_ZRMOT_DUR
 */
void MPU6050_setZeroMotionDetectionDuration(uint8 duration)
{
    IICwriteByte(devAddr, MPU6050_RA_ZRMOT_DUR, duration);
}

void MPU6050_readMemoryBlock(uint8 *data, uint16_t dataSize, uint8 bank, uint8 address)
{
    uint8 chunkSize;
	uint16_t i;
	MPU6050_setMemoryBank(bank,0,0);
    MPU6050_setMemoryStartAddress(address);
    
    for (i = 0; i < dataSize;)
    {
        // determine correct chunk size according to bank position and data size
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;

        // make sure we don't go past the data size
        if(i + chunkSize > dataSize) chunkSize = dataSize - i;

        // make sure this chunk doesn't go past the bank boundary (256 bytes)
        if(chunkSize > 256 - address) chunkSize = 256 - address;

        // read the chunk of data as specified
        IICwriteBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, data + i);
        
        // increase byte index by [chunkSize]
        i += chunkSize;

        // uint8_tautomatically wraps to 0 at 256
        address += chunkSize;

        // if we aren't done, update bank (if necessary) and address
        if(i < dataSize)
        {
            if(address == 0) bank++;
            MPU6050_setMemoryBank(bank,0,0);
            MPU6050_setMemoryStartAddress(address);
        }
    }
}

void MPU6050_getFIFOBytes(uint8 *data, uint8 length)
{
    IICreadBytes(devAddr, MPU6050_RA_FIFO_R_W, length, data);
}

/** Get full set of interrupt status bits.
 * These bits clear to 0 after the register has been read. Very useful
 * for getting multiple INT statuses, since each single bit read clears
 * all of them because it has to read the whole byte.
 * @return Current interrupt status
 * @see MPU6050_RA_INT_STATUS
 */
uint8 MPU6050_getIntStatus(void)
{
    return IIC_Read_One_Byte(devAddr, MPU6050_RA_INT_STATUS);
}

void MPU6050_setDMPEnabled(uint8 enabled)
{
    IICwriteBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, enabled);
}

uint8 MPU6050_getOTPBankValid(void)
{
	uint8  temp = IIC_Read_One_Byte(devAddr, MPU6050_RA_XG_OFFS_TC);
    return temp&(1<<MPU6050_TC_OTP_BNK_VLD_BIT);
}

int8_t MPU6050_getXGyroOffsetTC(void)
{
	uint8  temp = IIC_Read_One_Byte(devAddr, MPU6050_RA_XG_OFFS_TC);
	temp &= 0x3F;
    return temp;
}

void MPU6050_setXGyroOffsetTC(int8_t offset)
{
    IICwriteBits(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
}


// YG_OFFS_TC register
int8_t MPU6050_getYGyroOffsetTC(void)
{
	uint8 temp = IIC_Read_One_Byte(devAddr, MPU6050_RA_YG_OFFS_TC);
	temp &= 0x3F;
    
    return temp;
}
void MPU6050_setYGyroOffsetTC(int8_t offset)
{
    IICwriteBits(devAddr, MPU6050_RA_YG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
}

// ZG_OFFS_TC register
int8_t MPU6050_getZGyroOffsetTC(void)
{
	uint8 temp = IIC_Read_One_Byte(devAddr, MPU6050_RA_ZG_OFFS_TC);
	temp &= 0x3F;
    
    return temp;
}

void MPU6050_setZGyroOffsetTC(int8_t offset)
{
    IICwriteBits(devAddr, MPU6050_RA_ZG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
}

/** Set the I2C address of the specified slave (0-3).
 * @param num Slave number (0-3)
 * @param address New address for specified slave
 * @see getSlaveAddress()
 * @see MPU6050_RA_I2C_SLV0_ADDR
 */
void MPU6050_setSlaveAddress(uint8 num, uint8 address)
{
    if(num > 3)
        return;
    
    IICwriteByte(devAddr, MPU6050_RA_I2C_SLV0_ADDR + num*3, address);
}

/** Reset the I2C Master.
 * This bit resets the I2C Master when set to 1 while I2C_MST_EN equals 0.
 * This bit automatically clears to 0 after the reset has been triggered.
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_I2C_MST_RESET_BIT
 */
void MPU6050_resetI2CMaster(void)
{
    IICwriteBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_RESET_BIT, 1);
}

/** Set FIFO enabled status.
 * @param enabled New FIFO enabled status
 * @see getFIFOEnabled()
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_FIFO_EN_BIT
 */
void MPU6050_setFIFOEnabled(uint8 enabled)
{
    IICwriteBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_EN_BIT, enabled);
}

void MPU6050_resetDMP(void)
{
    IICwriteBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_RESET_BIT, 1);
}


void MpuGetOffset(void) //校准
{
	int32_t buffer[6]={0};
	int16_t i;  
	uint8_t k=30;
	const int8_t MAX_GYRO_QUIET = 5;
	const int8_t MIN_GYRO_QUIET = -5;	
                                                  
	int16_t LastGyro[3] = {0};
	int16_t ErrorGyro[3];	
	
	memset(MpuOffset,0,12);
	MpuOffset[2] = 8192;   //根据手册量程设定加速度标定值 
	
          
        _DINT();

	while(k--)  //判断飞控是否处于静止状态
	{
		do
		{
                    delay_ms(10);
                    MpuGetData();
                    for(i=0;i<3;i++)
                    {
                        ErrorGyro[i] = pMpu[i+3] - LastGyro[i];
                        LastGyro[i] = pMpu[i+3];	
                    }			
		}while ((ErrorGyro[0] >  MAX_GYRO_QUIET )|| (ErrorGyro[0] < MIN_GYRO_QUIET)
                        ||(ErrorGyro[1] > MAX_GYRO_QUIET )|| (ErrorGyro[1] < MIN_GYRO_QUIET)
                        ||(ErrorGyro[2] > MAX_GYRO_QUIET )|| (ErrorGyro[2] < MIN_GYRO_QUIET));
	}

/*           throw first 100  group data and make 256 group average as offset                    */	
        for(i=0;i<356;i++)  //取第100到第356组的平均值做为校准值
        {		
            MpuGetData();
            if(100 <= i)
            {
                uint8_t k;
                for(k=0;k<6;k++)
                {
                    buffer[k] += pMpu[k];
                }
            }
        }

	for(i=0;i<6;i++)  //保存校准值
	{
		MpuOffset[i] = buffer[i]>>8;
	}
        
        
        _EINT();
}

#define  Acc_Read()  IICreadBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H_0x3B, 6, buffer)
#define  Gyro_Read()  IICreadBytes(devAddr, 0x43, 6, &buffer[6])
uint8_t TestBuff[12];
int16_t ACC_X;
int16_t ACC_X2;
void MpuGetData(void) //读取陀螺仪数据加滤波
{
    uint8_t i;
    uint8_t buffer[12];
    uint8_t *ptr;

    Acc_Read();
    Gyro_Read();
    
   IICreadBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H_0x3B, 2, (uint8_t*)&ACC_X);
   
   ptr = (uint8_t*)&ACC_X;
   ACC_X2 = (*(ptr) << 8 | *(ptr + 1));
    
    memcpy(TestBuff,buffer,12);
    for(i=0;i<6;i++)
    {
            pMpu[i] = (((int16_t)buffer[i<<1] << 8) | buffer[(i<<1)+1])-MpuOffset[i];		
            if(i < 3) //此处对加速度做一维卡尔曼滤波
            {
                {
                      static _1_ekf_filter ekf[3] = {{0.02,0,0,0,0.001,0.543},{0.02,0,0,0,0.001,0.543},{0.02,0,0,0,0.001,0.543}};	
                      kalman_1(&ekf[i],(float)pMpu[i]);  //一维卡尔曼
                      pMpu[i] = (int16_t)ekf[i].out;
                }
            }
            if(i > 2)  //此处对角速度做一介低通滤波
            {	
                uint8_t k=i-3;
                const float factor = 0.15f;  //滤波因素			
                static float tBuff[3];		

                pMpu[i] = tBuff[k] = tBuff[k] * (1 - factor) + pMpu[i] * factor;      
            }
      }
}
